from collections import deque

def find_shortest_path(grid):
    start, exit = None, None
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == 'S':
                start = (i, j)
            elif grid[i][j] == 'E':
                exit = (i, j)

    rows, cols = len(grid), len(grid[0])
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  
    visited = [[False for _ in range(cols)] for _ in range(rows)]
    queue = deque()
    queue.append((start[0], start[1], 0))  # (row, col, distance)
    visited[start[0]][start[1]] = True

    while queue:
        x, y, dist = queue.popleft()

        if grid[x][y] == 'E':
            return dist

        for dx, dy in directions:
            nx, ny = x + dx, y + dy

            if 0 <= nx < rows and 0 <= ny < cols:
 
                if grid[nx][ny] != '#' and not visited[nx][ny]:
                    visited[nx][ny] = True
                    queue.append((nx, ny, dist + 1))

grid = [
    ['S', '.', '.', '.', '#'],
    ['.', '#', '#', '.', '.'],
    ['.', '#', '#', '.', '#'],
    ['.', '.', '.', '.', 'E']
]

shortest_path_length = find_shortest_path(grid)
print( {shortest_path_length})
